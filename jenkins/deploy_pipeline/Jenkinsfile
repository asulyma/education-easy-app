pipeline {
    agent any

    parameters {
        choice name: 'ENVIRONMENT', choices: ['all', 'prod', 'stage']
        gitParameter defaultValue: 'origin/master', name: 'BRANCH', type: 'PT_BRANCH'
        imageTag(name: 'APP_DOCKER_IMAGE', image: 'allsul/education_app',
                 registry: 'https://registry-1.docker.io', credentialId: 'dockerhub_user')
        imageTag(name: 'AUTH_DOCKER_IMAGE', image: 'allsul/education_auth',
                 registry: 'https://registry-1.docker.io', credentialId: 'dockerhub_user')
    }

    stages {

      stage('PREPARE KEYS') {
         steps {
            script {
               sh 'chmod 400 "$WORKSPACE/ansible/keys/aws-linux-1.pem"'
               sh 'chmod 400 "$WORKSPACE/ansible/keys/aws-linux-2.pem"'
            }
         }
      }

      stage('INSTALL REQUIREMENTS') {
         steps {
            ansiColor('xterm') {
                ansiblePlaybook(
                    playbook: "ansible/aws-install-requirements.yml",
                    inventory: "ansible/hosts",
                    colorized: true,
                    disableHostKeyChecking: true,
                    extras: '-v',
                    extraVars: [
                        ENV: "${ENVIRONMENT}"
                    ]
                )
            }
         }
      }

      stage('REMOVE DOCKER SERVICES') {
         steps {
            ansiColor('xterm') {
                ansiblePlaybook(
                    playbook: "ansible/aws-remove-docker-services.yml",
                    inventory: "ansible/hosts",
                    colorized: true,
                    disableHostKeyChecking: true,
                    extras: '-v',
                    extraVars: [
                        ENV: "${ENVIRONMENT}"
                    ]
                )
            }
         }
      }

      stage('DEPLOY DOCKER SERVICES') {
         steps {
            ansiColor('xterm') {
                ansiblePlaybook(
                    playbook: "ansible/aws-deploy-docker-services.yml",
                    inventory: "ansible/hosts",
                    colorized: true,
                    disableHostKeyChecking: true,
                    extras: '-v',
                    extraVars: [
                        ENV: "${ENVIRONMENT}",
                        BUILD_TAG: "${BUILD_TAG}",
                        APP_DOCKER_IMAGE: "${APP_DOCKER_IMAGE}",
                        AUTH_DOCKER_IMAGE: "${AUTH_DOCKER_IMAGE}"
                    ]
                )
            }
         }
      }

    } // end of stages block

    post {
      always {
         println '****** Started CLEAN POST ACTION stage ******'
         cleanWs()
         println '****** Finished CLEAN POST ACTION stage ******'
      }
    }

}
