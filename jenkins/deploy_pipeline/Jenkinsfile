pipeline {
    agent any

    parameters {
        choice name: 'ENVIRONMENT', choices: ['all', 'prod', 'stage']
        gitParameter defaultValue: 'origin/master', name: 'BRANCH', type: 'PT_BRANCH'
        imageTag(name: 'APP_DOCKER_IMAGE', image: 'allsul/education_app',
                 registry: 'https://registry-1.docker.io', credentialId: 'docker_hub')
        imageTag(name: 'AUTH_DOCKER_IMAGE', image: 'allsul/education_auth',
                 registry: 'https://registry-1.docker.io', credentialId: 'docker_hub')
    }

    stages {

      stage('PREPARE') {
         steps {
            script {
               // To use this functionality - need to configure EMail settings from Jenkins
               sh 'echo SENDING EMAIL ABOUT ${ENVIRONMENT} DEPLOYMENT STARTED'
               sh 'chmod 400 $WORKSPACE/ansible/aws-linux-1.pem'
            }
         }
      }

      stage('INSTALL REQUIREMENTS') {
         steps {
            ansiColor('xterm') {
                ansiblePlaybook(
                    playbook: "ansible/aws-install-requirements.yml",
                    inventory: "ansible/hosts",
                    colorized: true,
                    disableHostKeyChecking: true,
                    extras: '-v',
                    extraVars: [
                        ENV: "${ENVIRONMENT}"
                    ]
                )
            }
         }
      }

      stage('REMOVE COMPOSE FILE') {
         steps {
            script {
               // call ansible role
               sh 'echo remove'
            }
         }
      }

      stage('DEPLOY COMPOSE FILE') {
         steps {
            script {
                 sh 'echo $APP_DOCKER_IMAGE'
                 sh 'echo $APP_DOCKER_IMAGE_TAG'

                 sh 'echo $AUTH_DOCKER_IMAGE'
                 sh 'echo $AUTH_DOCKER_IMAGE_TAG'
            }
         }
      }

    } // end of stages block

}
